// Test generated by RoostGPT for test NodeUnitTest using AI Type Open AI and AI Model gpt-4

import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt"; 
import request from 'supertest';
import { User } from './models/User';
import { app } from './index';

jest.mock('./models/User');

beforeEach(() => {
  User.findOne.mockClear();
  User.create.mockClear();
});

describe("POST /register", () => {
  test("should redirect to /login if user already exists", async () => {
    User.findOne.mockResolvedValueOnce({ email: "test@test.com" });
    const response = await request(app)
      .post("/register")
      .send({ name: "Test", email: "test@test.com", password: "password" });
    expect(response.headers.location).toBe("/login");
  });

  test("should create new user if user does not exist", async () => {
    User.findOne.mockResolvedValueOnce(null);
    User.create.mockResolvedValueOnce({
      name: "Test",
      email: "test@test.com",
      password: "password",
      _id: "1234567890"
    });
    const response = await request(app)
      .post("/register")
      .send({ name: "Test", email: "test@test.com", password: "password" });
    expect(User.create).toHaveBeenCalledWith({
      name: "Test",
      email: "test@test.com",
      password: expect.any(String)
    });
    expect(response.headers.location).toBe("/");
    expect(response.headers['set-cookie']).toBeDefined();
  });
});
