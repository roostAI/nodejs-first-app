// Test generated by RoostGPT for test NodeUnitTest using AI Type Open AI and AI Model gpt-4

import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { isAuthenticated } from './index';
import User from './models/User'; // assuming User model is in models folder

jest.mock('jsonwebtoken');
jest.mock('./models/User');

describe('isAuthenticated', () => {
  let req;
  let res;
  let next;

  beforeEach(() => {
    req = {
      cookies: {}
    };

    res = {
      redirect: jest.fn()
    };

    next = jest.fn();
  });

  it('should call next if token is valid', async () => {
    const token = 'validtoken';
    req.cookies.token = token;

    const userId = 'userId';
    jwt.verify.mockReturnValue({_id: userId});

    const user = {id: userId};
    User.findById.mockResolvedValue(user);

    await isAuthenticated(req, res, next);

    expect(jwt.verify).toHaveBeenCalledWith(token, "sdjasdbajsdbjasd");
    expect(User.findById).toHaveBeenCalledWith(userId);
    expect(req.user).toEqual(user);
    expect(next).toHaveBeenCalled();
    expect(res.redirect).not.toHaveBeenCalled();
  });

  it('should redirect to login if token is not provided', async () => {
    await isAuthenticated(req, res, next);

    expect(res.redirect).toHaveBeenCalledWith('/login');
    expect(jwt.verify).not.toHaveBeenCalled();
    expect(User.findById).not.toHaveBeenCalled();
    expect(next).not.toHaveBeenCalled();
  });

  it('should redirect to login if token is invalid', async () => {
    const token = 'invalidtoken';
    req.cookies.token = token;

    jwt.verify.mockImplementation(() => {
      throw new Error('Invalid token');
    });

    await isAuthenticated(req, res, next);

    expect(jwt.verify).toHaveBeenCalledWith(token, "sdjasdbajsdbjasd");
    expect(res.redirect).toHaveBeenCalledWith('/login');
    expect(User.findById).not.toHaveBeenCalled();
    expect(next).not.toHaveBeenCalled();
  });
});
